enum Level {
  principiante
  intermedio
  avanzado
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

interface Person {
  _id: ID!
  name: String!
  email: String!
}

type Student implements Person {
  _id: ID!
  name: String!
  email: String!
  avatar: String
}

type Monitor implements Person {
  _id: ID!
  name: String!
  email: String!
  phone: String
}

type Query {
  getCourses: [Course]
  getCourse(id: ID!): Course
  getPeople: [Person]
  getPerson(id: ID!): Person
}

input CourseInput {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}

input CourseEditInput {
  title: String
  teacher: String
  description: String
  topic: String
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}

input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  createCourse(input: CourseInput!): Course
  editCourse(_id: ID!, input: CourseEditInput): Course
  createPerson(input: PersonInput!): Person
  editPerson(_id: ID!, input: PersonEditInput): Person
  addPeople(courseID: ID!, personID: ID!): Course
  deleteCourse(_id: ID!): Boolean
  deleteStudent(_id: ID!): Boolean
}

